"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown))))
}
sink()
png("../output/sentimentMatchChart.png", width=600, height=300)
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\""))
dev.off()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(aes(color=cyl))
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(aes(color=blues9)))
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(aes(color=blues9))
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(aes(fill=..x..))
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(aes(shape=18))
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(aes(shape="18"))+
theme_grey
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point +
theme_grey
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point() +
theme_grey()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point() +
theme_bw()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point() +
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point() +
theme_minimal()+
scale_shape_manual(values=18)
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point() +
theme_minimal()+
scale_shape_manual(values=18)
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point() +
theme_minimal()+
scale_shape_manual(values=c(18:25))
dev.off()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point() +
theme_minimal()+
scale_shape_manual(values=c(18:25))
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point() +
theme_minimal()+
scale_shape_manual(values=c(18,18,18,18))
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point() +
theme_minimal()+
scale_shape_manual(values=c(18,18,18,18))
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_dotplot() +
theme_minimal()+
dev.off()
dev.off()
dev.off()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_dotplot() +
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_bar() +
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_bar() +
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_bar() +
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18) +
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=5) +
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3) +
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3,) +
geom_smooth()+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3) +
geom_smooth(method=lm)+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3) +
geom_smooth(color="red")+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3) +
geom_smooth(color="purple")+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3, color="blue") +
geom_smooth(color="purple")+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3, color="blue") +
geom_smooth(color="purple")+
scale_color_brewer()+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3, color="blue") +
geom_smooth(color="purple")+
scale_color_brewer(sentiment)+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3, color="blue") +
geom_smooth(color="purple")+
scale_fill_gradient2(heat.colors())
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3, color="blue") +
geom_smooth(color="purple")+
scale_fill_gradient2(heat.colors(nrow(theOne)))
warnings()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3, color="blue") +
geom_smooth(color="purple")+
scale_fill_gradient2(heat.colors(nrow(theOne)))
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3, color="blue") +
geom_smooth(color="purple")+
scale_fill_gradient2(heat.colors(nrow(theOne)))+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3, color="blue") +
geom_smooth(color="purple")+
scale_fill_manual(values=c("green","yellow","red"))+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3, color="blue") +
geom_smooth(color="purple")+
scale_fill_manual(values=c("green","yellow","red"))+
theme_minimal()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
scale_fill_manual(values=c("green","yellow","red"))+
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3) +
geom_smooth(color="purple")+
theme_minimal()
#### handle input arguments ####
args = commandArgs(trailingOnly=TRUE)
# sentimentDirection if there is at least one argument: if not, return an error
if (length(args)==0) {
stop("At least one argument must be supplied (input file).n", call.=FALSE)
} else if (length(args)==1) {
message("using searchterm: " , toString(args[1]))
}
userQuery = toString(args[1])
#userQuery= toString("military")
#### load packages ####
library(stringr)
library(glue)
library(SentimentAnalysis)
load("../r-env/tidytokens-sample.RData")
#### set REGEX versions of query ####
regexUserQuery = paste0("(?i)",userQuery)
regexUserQuerySentence = paste0("[^.]*",regexUserQuery,"[^.]*\\.")
stringCountResult = str_count(tokens1989, regexUserQuery)
stringCountSum = sum(stringCountResult)
remove(stringCountResult)
tempDir=file("../output/matchCount.txt")
sink(tempDir)
writeLines(toString(stringCountSum))
sink()
#### build dataFrames ####
stringMatchResult= str_match_all(clearText1989, regexUserQuerySentence) %>% compact
tokenMatches = tokens1989[which(tokens1989$token == str_match_all(tokens1989$token,regexUserQuery)), ]
theOne = data_frame("sentenceNumbers" = unlist(tokenMatches$sentence), "sentenceTexts" = unlist(stringMatchResult) )
tempDir=file("../output/matchSentences.txt")
sink(tempDir)
writeLines(unlist(lapply(stringMatchResult, paste, collapse=" ")))
sink()
#### sentimentAnalysis ####
sentiment = analyzeSentiment(unlist(theOne$sentenceTexts))
sentimentDirection = convertToDirection(sentiment)
theOne=cbind(sentimentDirection$SentimentGI,sentimentDirection$SentimentHE,sentimentDirection$SentimentLM,sentimentDirection$SentimentQDAP,theOne)
#sentimentDirection$sentence = stringMatchResult
tempDir=file("../output/sentimentDirections.txt")
sink(tempDir)
thumbsUp = toString("<i class='fa fa-thumbs-up' style='color:green'></i>")
neutralIcon = toString("<i class='fa fa-star-half-o' style='color:orange'></i>")
thumbsDown = toString("<i class='fa fa-thumbs-o-down' style='color:red'></i>")
for (i in 1:length(stringMatchResult)){
writeLines(paste(stringMatchResult[i],
"</div><div class='w3-rest w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown))))
}
sink()
png("../output/sentimentMatchChart.png", width=600, height=300)
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
scale_fill_manual(values=c("green","yellow","red"))+
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3) +
geom_smooth(color="purple")+
theme_minimal()
dev.off()
#### handle input arguments ####
args = commandArgs(trailingOnly=TRUE)
# sentimentDirection if there is at least one argument: if not, return an error
if (length(args)==0) {
stop("At least one argument must be supplied (input file).n", call.=FALSE)
} else if (length(args)==1) {
message("using searchterm: " , toString(args[1]))
}
#userQuery = toString(args[1])
userQuery= toString("military")
#### load packages ####
library(stringr)
library(glue)
library(SentimentAnalysis)
load("../r-env/tidytokens-sample.RData")
#### set REGEX versions of query ####
regexUserQuery = paste0("(?i)",userQuery)
regexUserQuerySentence = paste0("[^.]*",regexUserQuery,"[^.]*\\.")
stringCountResult = str_count(tokens1989, regexUserQuery)
stringCountSum = sum(stringCountResult)
remove(stringCountResult)
tempDir=file("../output/matchCount.txt")
sink(tempDir)
writeLines(toString(stringCountSum))
sink()
#### build dataFrames ####
stringMatchResult= str_match_all(clearText1989, regexUserQuerySentence) %>% compact
tokenMatches = tokens1989[which(tokens1989$token == str_match_all(tokens1989$token,regexUserQuery)), ]
theOne = data_frame("sentenceNumbers" = unlist(tokenMatches$sentence), "sentenceTexts" = unlist(stringMatchResult) )
tempDir=file("../output/matchSentences.txt")
sink(tempDir)
writeLines(unlist(lapply(stringMatchResult, paste, collapse=" ")))
sink()
#### sentimentAnalysis ####
sentiment = analyzeSentiment(unlist(theOne$sentenceTexts))
sentimentDirection = convertToDirection(sentiment)
theOne=cbind(sentimentDirection$SentimentGI,sentimentDirection$SentimentHE,sentimentDirection$SentimentLM,sentimentDirection$SentimentQDAP,theOne)
#sentimentDirection$sentence = stringMatchResult
tempDir=file("../output/sentimentDirections.txt")
sink(tempDir)
thumbsUp = toString("<i class='fa fa-thumbs-up' style='color:green'></i>")
neutralIcon = toString("<i class='fa fa-star-half-o' style='color:orange'></i>")
thumbsDown = toString("<i class='fa fa-thumbs-o-down' style='color:red'></i>")
for (i in 1:length(stringMatchResult)){
writeLines(paste(stringMatchResult[i],
"</div><div class='w3-rest w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown))))
}
sink()
png("../output/sentimentMatchChart.png", width=600, height=300)
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
scale_fill_manual(values=c("green","yellow","red"))+
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3) +
geom_smooth(color="purple")+
theme_minimal()
dev.off()
plotSentiment(sentiment, x=theOne$sentenceNumbers, xlab="sentence of occurrence") +
ggtitle(paste0("Sentiment for each occurence of \"",userQuery,"\"")) +
geom_point(shape=18, size=3) +
geom_smooth(color="purple")+
theme_minimal()
warnings()
load("../r-env/tidytokens-sample.RData")
thumbsUp = toString("<i class='fa fa-thumbs-up' style='color:green'></i>")
neutralIcon = toString("<i class='fa fa-star-half-o' style='color:orange'></i>")
thumbsDown = toString("<i class='fa fa-thumbs-o-down' style='color:red'></i>")
save.image("C:/Users/tnmon/git/sotu-db/r-env/tidytokens-sample.RData")
#### handle input arguments ####
args = commandArgs(trailingOnly=TRUE)
# sentimentDirection if there is at least one argument: if not, return an error
if (length(args)==0) {
stop("At least one argument must be supplied (input file).n", call.=FALSE)
} else if (length(args)==1) {
message("using searchterm: " , toString(args[1]))
}
#userQuery = toString(args[1])
userQuery= toString("military")
#### load packages ####
library(stringr)
library(glue)
library(SentimentAnalysis)
load("../r-env/tidytokens-sample.RData")
#### set REGEX versions of query ####
regexUserQuery = paste0("(?i)",userQuery)
regexUserQuerySentence = paste0("[^.]*",regexUserQuery,"[^.]*\\.")
stringCountResult = str_count(tokens1989, regexUserQuery)
stringCountSum = sum(stringCountResult)
remove(stringCountResult)
tempDir=file("../output/matchCount.txt")
sink(tempDir)
writeLines(toString(stringCountSum))
sink()
#### build dataFrames ####
stringMatchResult= str_match_all(clearText1989, regexUserQuerySentence) %>% compact
tokenMatches = tokens1989[which(tokens1989$token == str_match_all(tokens1989$token,regexUserQuery)), ]
theOne = data_frame("sentenceNumbers" = unlist(tokenMatches$sentence), "sentenceTexts" = unlist(stringMatchResult) )
tempDir=file("../output/matchSentences.txt")
sink(tempDir)
writeLines(unlist(lapply(stringMatchResult, paste, collapse=" ")))
sink()
#### sentimentAnalysis ####
sentiment = analyzeSentiment(unlist(theOne$sentenceTexts))
sentimentDirection = convertToDirection(sentiment)
theOne=cbind(sentimentDirection$SentimentGI,sentimentDirection$SentimentHE,sentimentDirection$SentimentLM,sentimentDirection$SentimentQDAP,theOne)
#sentimentDirection$sentence = stringMatchResult
tempDir=file("../output/sentimentDirections.txt")
sink(tempDir)
for (i in 1:length(stringMatchResult)){
writeLines(paste(stringMatchResult[i],
theOne$sentence[i],
"</div><div class='w3-rest w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown))))
}
sink()
theOne$sentence[i]
theOne$sentenceNumbers[i]
theOne$sentenceNumbers[i
]
i=2
theOne$sentenceNumbers[i]
#sentimentDirection$sentence = stringMatchResult
tempDir=file("../output/sentimentDirections.txt")
sink(tempDir)
for (i in 1:length(stringMatchResult)){
writeLines(paste(stringMatchResult[i],
"sentence n=", theOne$sentenceNumbers[i],
"</div><div class='w3-rest w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown))))
}
sink()
sink()
library(tidytext)
library(plyr)
library(dplyr)
library(purrr)
library(purrr)
library(tidyverse)
(paste("<div class='w3-cell-row w3-border w3-hover-pale-blue'>",
"<div class='w3-container w3-cell w3-cell-middle w3-twothird>",
stringMatchResult[i],
"</div>",
"<div class='w3-container w3-cell w3-cell-middle style='width:75px'>",
"sentence n=",
theOne$sentenceNumbers[i],
"</div>",
"<div class='w3-container w3-rest w3-cell w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown))),
"</div>","</div>")
paste("<div class='w3-cell-row w3-border w3-hover-pale-blue'>",
"<div class='w3-container w3-cell w3-cell-middle w3-twothird>",
stringMatchResult[i],
"</div>",
"<div class='w3-container w3-cell w3-cell-middle style='width:75px'>",
"sentence n=",
theOne$sentenceNumbers[i],
"</div>",
"<div class='w3-container w3-rest w3-cell w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)))),
"</div>","</div>")
paste("<div class='w3-cell-row w3-border w3-hover-pale-blue'>",
"<div class='w3-container w3-cell w3-cell-middle w3-twothird>",
stringMatchResult[i],
"</div>",
"<div class='w3-container w3-cell w3-cell-middle style='width:75px'>",
"sentence n=",
theOne$sentenceNumbers[i],
"</div>",
"<div class='w3-container w3-rest w3-cell w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),
"</div>","</div>"))
paste("<div class='w3-cell-row w3-border w3-hover-pale-blue'>",
"<div class='w3-container w3-cell w3-cell-middle w3-twothird>",
stringMatchResult[i],
"</div>",
"<div class='w3-container w3-cell w3-cell-middle style='width:75px'>",
"sentence n=",
theOne$sentenceNumbers[i],
"</div>",
"<div class='w3-container w3-rest w3-cell w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),
"</div>","</div>")
writeLines(paste("<div class='w3-cell-row w3-border w3-hover-pale-blue'>",
"<div class='w3-container w3-cell w3-cell-middle w3-twothird>",
stringMatchResult[i],
"</div>",
"<div class='w3-container w3-cell w3-cell-middle style='width:75px'>",
"sentence n=",
theOne$sentenceNumbers[i],
"</div>",
"<div class='w3-container w3-rest w3-cell w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),
"</div>","</div>")
writeLines(paste("<div class='w3-cell-row w3-border w3-hover-pale-blue'>",
"<div class='w3-container w3-cell w3-cell-middle w3-twothird>",
stringMatchResult[i],
"</div>",
"<div class='w3-container w3-cell w3-cell-middle style='width:75px'>",
"sentence n=",
theOne$sentenceNumbers[i],
"</div>",
"<div class='w3-container w3-rest w3-cell w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),
"</div>","</div>"))
writeLines(paste0("<div class='w3-cell-row w3-border w3-hover-pale-blue'>",
"<div class='w3-container w3-cell w3-cell-middle w3-twothird>",
stringMatchResult[i],
"</div>",
"<div class='w3-container w3-cell w3-cell-middle style='width:75px'>",
"sentence n=",
theOne$sentenceNumbers[i],
"</div>",
"<div class='w3-container w3-rest w3-cell w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),
"</div>","</div>"))
#sentimentDirection$sentence = stringMatchResult
tempDir=file("../output/sentimentDirections.txt")
sink(tempDir)
writeLines(paste0("<div class='w3-cell-row w3-border w3-hover-pale-blue'>",
"<div class='w3-container w3-cell w3-cell-middle w3-twothird>",
stringMatchResult[i],
"</div>",
"<div class='w3-container w3-cell w3-cell-middle style='width:75px'>",
"sentence n=",
theOne$sentenceNumbers[i],
"</div>",
"<div class='w3-container w3-rest w3-cell w3-cell-middle w3-right w3-padding w3-hover-pale-blue'>",
"GI: ",str_replace_all(sentimentDirection$SentimentGI[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"HE: ",str_replace_all(sentimentDirection$SentimentHE[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"LM: ",str_replace_all(sentimentDirection$SentimentLM[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),"<br>",
"QDAP: ",str_replace_all(sentimentDirection$SentimentQDAP[i],c("positive"=thumbsUp, "neutral"=neutralIcon, "negative"=thumbsDown)),
"</div>","</div>"))
sink()
